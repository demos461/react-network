{"version":3,"sources":["styles/ProfileInfo.module.css","styles/Navbar.module.css","styles/Users.module.css","styles/Login.module.css","styles/Paginator.module.css","styles/ProfileDataForm.module.css","styles/Header.module.css","styles/Posts.module.css","styles/Post.module.css","styles/Error404.module.css","styles/Preloader.module.css","styles/Contact.module.css","styles/Messages.module.css","redux/reducers/messages-reducer.ts","components/Navbar/Navbar.tsx","components/Messages/Dialog.tsx","components/Messages/Message.tsx","components/Messages/Messages.tsx","hoc/withAuthRedirect.tsx","redux/reducers/users-reducer.ts","components/Messages/MessagesContainer.tsx","assets/images/user.png","components/Paginator/Paginator.tsx","components/Users/Users.tsx","api/API.ts","redux/reducers/profile-reducer.ts","components/Preloader/Preloader.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/Contact.tsx","components/Profile/ProfileInfo/ProfileData.tsx","redux/reducers/auth-reducer.ts","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Posts/Post.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Posts/PostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","redux/reducers/app-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","components/Error404/Error404.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["module","exports","ACTION_TYPE","Navbar","className","s","nav","nav_item","to","activeClassName","active","initialState","dialogs","id","name","messages","message","Dialog","memo","path","styles","dialog","Message","message_body","message_author","message_text","message_time","message_avatar","src","alt","Messages","sendMessage","formik","useFormik","initialValues","validate","values","errors","onSubmit","resetForm","dialogItems","map","d","m","inputForm","handleSubmit","textarea","getFieldProps","rows","btn","type","mapStateToProps","state","isAuth","auth","MessagesContainer","compose","connect","messagesPage","SEND_MESSAGE","payload","Component","props","restProps","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagination","arrow","onClick","filter","p","num","pageNumber","Users","users","unfollow","follow","followingInProgress","totalUsersCount","u","user","userAvatar","photos","small","userIcon","followed","disabled","some","userName","userStatus","status","instance","axios","create","baseURL","withCredentials","headers","usersAPI","get","userId","post","delete","authAPI","email","password","rememberMe","captcha","profileAPI","put","image","formData","FormData","append","profile","securityAPI","isFetching","setTotalUsersCount","SET_TOTAL_USERS_COUNT","toggleIsFetching","TOGGLE_IS_FETCHING","toggleFollowingInProgress","TOGGLE_IS_FOLLOWING_PROGRESS","Preloader","circle2","UsersContainer","changeCurrentPage","getUsers","this","length","PureComponent","dispatch","then","res","data","resultCode","FOLLOW_USER","followSuccess","UNFOLLOW_USER","unfollowSuccess","CHANGE_CURRENT_PAGE","items","SET_USERS","totalCount","ProfileStatus","editMode","onEditMode","setState","offEditMode","updateUserStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","isOwner","statusInput","onBlur","onChange","autoFocus","Contact","socialName","href","contact","ProfileData","onEditModeClick","profileInfo","avatar","lookingForAJob","lookingForAJobDescription","fullName","descr","aboutMe","Object","keys","contacts","key","facebook","website","vk","twitter","instagram","youtube","github","mainLink","large","posts","setUserStatus","SET_STATUS","getUserProfile","SET_USER_PROFILE","ProfileDataForm","savePhoto","updateUserProfile","setEditMode","form","files","placeholder","handleChange","checked","toUpperCase","slice","btnGroup","getState","ProfileInfo","Post","postMessage","Posts","addPost","posts_form","PostsContainer","profilePage","ADD_POST","Profile","ProfileContainer","match","params","authUserId","history","getUserStatus","refreshProfile","snapshot","UPDATE_USER_PHOTO","withRouter","Header","login","logout","header","logOut","loginBtn","captchaUrl","setAuthUser","SET_AUTH_USER","getAuthUser","getCaptchaUrl","url","GET_CAPTCHA_URL","HeaderContainer","Login","test","account","touched","error","initialized","Error404","App","initializeApp","exact","render","app","INITIALIZED_SUCCESS","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b79a8c65.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__1XvmN\",\"lookingForAJob\":\"ProfileInfo_lookingForAJob__23dTc\",\"lookingForAJobDescription\":\"ProfileInfo_lookingForAJobDescription__BlOpS\",\"avatar\":\"ProfileInfo_avatar__1oSFy\",\"fullName\":\"ProfileInfo_fullName__2lN32\",\"aboutMe\":\"ProfileInfo_aboutMe__nI-zm\",\"contacts\":\"ProfileInfo_contacts__1u3DL\",\"status\":\"ProfileInfo_status__QNhP2\",\"statusInput\":\"ProfileInfo_statusInput__1-QTl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__23nsD\",\"nav_item\":\"Navbar_nav_item__5RYrE\",\"active\":\"Navbar_active__3N3nF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"Users_user__2xg2a\",\"userName\":\"Users_userName__2HoWM\",\"userStatus\":\"Users_userStatus__3kLul\",\"userLocation\":\"Users_userLocation__1HR9W\",\"userAvatar\":\"Users_userAvatar__1GjnO\",\"btn\":\"Users_btn__3Q4G4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__2mxGC\",\"error\":\"Login_error__34Kpn\",\"btn\":\"Login_btn__2ffgj\",\"captcha\":\"Login_captcha__3YL5n\",\"account\":\"Login_account__2wO8v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNumber\":\"Paginator_pageNumber__adzV4\",\"active\":\"Paginator_active__1oJPn\",\"pagination\":\"Paginator_pagination__xXp9h\",\"arrow\":\"Paginator_arrow__27VT4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ProfileDataForm_form__1qOMW\",\"error\":\"ProfileDataForm_error__2G2kd\",\"btnGroup\":\"ProfileDataForm_btnGroup__e6le8\",\"btn\":\"ProfileDataForm_btn__xDlSU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__upHct\",\"loginBtn\":\"Header_loginBtn__3XWDG\",\"login\":\"Header_login__1YO0_\",\"logOut\":\"Header_logOut__2SP3w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts_form\":\"Posts_posts_form__3t5_n\",\"textarea\":\"Posts_textarea__2fxBs\",\"btn\":\"Posts_btn__QDWB5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1rRBH\",\"postMessage\":\"Post_postMessage__yrQzw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error404_error__12OcP\",\"type\":\"Error404_type__3y6tJ\",\"btn\":\"Error404_btn__punK9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"circle2\":\"Preloader_circle2__m2twK\",\"spin2\":\"Preloader_spin2__3gYd9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"Contact_contact__2uTGD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Messages_dialogs__1dwUa\",\"dialog-items\":\"Messages_dialog-items__2blon\",\"dialog\":\"Messages_dialog__21rpG\",\"active\":\"Messages_active__4Nwxa\",\"messages\":\"Messages_messages__2wwsG\",\"inputForm\":\"Messages_inputForm__3YSVv\",\"message\":\"Messages_message__22yeN\",\"message_avatar\":\"Messages_message_avatar__EJm45\",\"message_body\":\"Messages_message_body__1OM21\",\"message_author\":\"Messages_message_author__1opSs\",\"message_text\":\"Messages_message_text__Ay6sQ\",\"message_time\":\"Messages_message_time__6M1QV\",\"textarea\":\"Messages_textarea__BAVzt\",\"btn\":\"Messages_btn__3Tad2\"};","enum ACTION_TYPE {\r\n    SEND_MESSAGE = 'MESSAGES/SEND_MESSAGE',\r\n}\r\n\r\nexport type DialogType = {\r\n    id: number;\r\n    name: string;\r\n};\r\n\r\nexport type MessageType = {\r\n    id: number;\r\n    message: string;\r\n};\r\n\r\nexport type MessagesStateType = {\r\n    dialogs: Array<DialogType>;\r\n    messages: Array<MessageType>;\r\n};\r\n\r\n\r\nconst initialState: MessagesStateType = {\r\n    dialogs: [\r\n        {id: 1, name: 'Ilya'},\r\n        {id: 2, name: 'Oleg'},\r\n        {id: 3, name: 'Mihail'},\r\n        {id: 4, name: 'Andrey'},\r\n        {id: 5, name: 'Evgeniy'},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hello world!'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'I am fine, thank you'},\r\n    ],\r\n}\r\n\r\n\r\nexport const messagesReducer = (state: MessagesStateType = initialState, action: MessagesActionsType): MessagesStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.SEND_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, ...action.payload}],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type MessagesActionsType = ReturnType<typeof sendMessage>\r\n\r\nexport const sendMessage = (message: string) => {\r\n    return {\r\n        type: ACTION_TYPE.SEND_MESSAGE,\r\n        payload: {\r\n            message\r\n        }\r\n    } as const\r\n}\r\n","import React, {FC} from 'react';\nimport s from '../../styles/Navbar.module.css';\nimport {NavLink} from 'react-router-dom';\n\nconst Navbar: FC = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.nav_item}>\n                <NavLink to={'/profile'} activeClassName={s.active}>\n                    Profile\n                </NavLink>\n            </div>\n            <div className={s.nav_item}>\n                <NavLink to={'/messages'} activeClassName={s.active}>\n                    Messages\n                </NavLink>\n            </div>\n\n            <div className={s.nav_item}>\n                <NavLink to={'/users'} activeClassName={s.active}>\n                    Users\n                </NavLink>\n            </div>\n        </nav>\n    );\n};\n\nexport default Navbar;\n","import React, {FC} from \"react\";\nimport styles from \"../../styles/Messages.module.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { memo } from \"react\";\n\ntype DialogProps = {\n  name: string;\n  id: number;\n};\n\nconst Dialog: FC<DialogProps> = memo(({ id, name }) => {\n  let path = \"/messages/\" + id;\n  return (\n    <div className={styles.dialog}>\n      <NavLink to={path} activeClassName={styles.active}>\n        {name}\n      </NavLink>\n    </div>\n  );\n});\n\nexport default Dialog;\n","import React, {FC, memo } from 'react';\nimport styles from '../../styles/Messages.module.css';\n\ntype MessageProps = {\n    message: string;\n};\n\nconst Message: FC<MessageProps> = memo(({message}) => {\n    return <div className={styles.message}>\n        <div className={styles.message_body}>\n            <div className={styles.message_author}>Ilya</div>\n            <div className={styles.message_text}>{message}</div>\n            <div className={styles.message_time}>4:20</div>\n        </div>\n        <div className={styles.message_avatar}>\n            <img src={'https://cdn1.flamp.ru/96a74d31e6bd619a8f381c27ef308a76.png'} alt={'avatar'}/>\n        </div>\n    </div>\n});\n\nexport default Message;\n","import React, { FC } from 'react';\r\nimport styles from '../../styles/Messages.module.css';\r\nimport Dialog from './Dialog';\r\nimport Message from './Message';\r\nimport s from '../../styles/Messages.module.css';\r\nimport {DialogType, MessageType} from '../../redux/reducers/messages-reducer';\r\nimport {useFormik} from \"formik\";\r\nimport { memo } from 'react';\r\n\r\n\r\ntype MessagesProps = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n    sendMessage: (message: string) => void\r\n};\r\n\r\ntype FormikErrorType = {\r\n    message?: string\r\n}\r\n\r\nconst Messages: FC<MessagesProps> = memo(({dialogs, messages, sendMessage}) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.message) {\r\n                errors.message = 'Required';\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm()\r\n            sendMessage(values.message)\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogItems}>\r\n                {dialogs &&\r\n                dialogs.map((d) => <Dialog key={d.id} name={d.name} id={d.id}/>)}\r\n            </div>\r\n            <div className={styles.messages}>\r\n                {messages &&\r\n                messages.map((m) => <Message key={m.id} message={m.message}/>)}\r\n                <form className={s.inputForm} onSubmit={formik.handleSubmit}>\r\n                    <textarea\r\n                        className={s.textarea}\r\n                        {...formik.getFieldProps('message')}\r\n                        rows={5}\r\n                    />\r\n                    <button className={s.btn} type={'submit'}>Send</button>\r\n                </form>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Messages;","import React, {ComponentType} from 'react';\r\nimport {AppRootStateType} from '../redux/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n","import {usersAPI} from '../../api/API';\r\nimport {Dispatch} from 'redux';\r\n\r\nenum ACTION_TYPE {\r\n    FOLLOW_USER = 'USERS/FOLLOW_USER',\r\n    UNFOLLOW_USER = 'USERS/UNFOLLOW_USER',\r\n    SET_USERS = 'USERS/SET_USERS',\r\n    SET_TOTAL_USERS_COUNT = 'USERS/SET_TOTAL_COUNT',\r\n    CHANGE_CURRENT_PAGE = 'USERS/CHANGE_CURRENT_PAGE',\r\n    TOGGLE_IS_FETCHING = 'USERS/TOGGLE_IS_FETCHING',\r\n    TOGGLE_IS_FOLLOWING_PROGRESS = 'USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n}\r\n\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    followed: boolean\r\n}\r\n\r\n\r\nexport type UsersStateType = {\r\n    users: UserType[]\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\n\r\nconst initialState: UsersStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [],\r\n}\r\n\r\n\r\nexport const usersReducer = (state: UsersStateType = initialState, action: UsersActionsType): UsersStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.FOLLOW_USER:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.payload.userId ? {...u, followed: true} : u)\r\n            }\r\n        case ACTION_TYPE.UNFOLLOW_USER: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.payload.userId ? {...u, followed: false} : u)\r\n            }\r\n        }\r\n        case ACTION_TYPE.SET_USERS: {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        }\r\n        case ACTION_TYPE.SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        }\r\n        case ACTION_TYPE.CHANGE_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        }\r\n        case ACTION_TYPE.TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        }\r\n        case ACTION_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.payload.isFetching\r\n                    ? [...state.followingInProgress, action.payload.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.payload.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n\r\n    }\r\n}\r\n\r\ntype UsersActionsType =\r\n    ReturnType<typeof followSuccess> |\r\n    ReturnType<typeof unfollowSuccess> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof changeCurrentPage> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof toggleIsFetching> |\r\n    ReturnType<typeof toggleFollowingInProgress>\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {\r\n        type: ACTION_TYPE.FOLLOW_USER,\r\n        payload: {\r\n            userId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const unfollowSuccess = (userId: number) => {\r\n    return {\r\n        type: ACTION_TYPE.UNFOLLOW_USER,\r\n        payload: {\r\n            userId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const setUsers = (users: UserType[]) => {\r\n    return {\r\n        type: ACTION_TYPE.SET_USERS,\r\n        payload: {\r\n            users,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return {\r\n        type: ACTION_TYPE.SET_TOTAL_USERS_COUNT,\r\n        payload: {\r\n            totalUsersCount,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const changeCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: ACTION_TYPE.CHANGE_CURRENT_PAGE,\r\n        payload: {\r\n            currentPage,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: ACTION_TYPE.TOGGLE_IS_FETCHING,\r\n        payload: {\r\n            isFetching,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: ACTION_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        payload: {\r\n            isFetching,\r\n            userId,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => (dispatch: Dispatch<UsersActionsType>) => {\r\n    dispatch(toggleIsFetching(true))\r\n    usersAPI.getUsers(currentPage, pageSize).then(res => {\r\n        dispatch(setUsers(res.data.items))\r\n        dispatch(setTotalUsersCount(res.data.totalCount))\r\n        dispatch(toggleIsFetching(false))\r\n    })\r\n}\r\n\r\nexport const follow = (userId: number) => (dispatch: Dispatch<UsersActionsType>) => {\r\n    dispatch(toggleFollowingInProgress(true, userId))\r\n    usersAPI.follow(userId).then(res => {\r\n        if (res.data.resultCode === 0) dispatch(followSuccess(userId))\r\n        dispatch(toggleFollowingInProgress(false, userId))\r\n    })\r\n}\r\n\r\nexport const unfollow = (userId: number) => (dispatch: Dispatch<UsersActionsType>) => {\r\n    dispatch(toggleFollowingInProgress(true, userId))\r\n    usersAPI.unfollow(userId).then(res => {\r\n        if (res.data.resultCode === 0) dispatch(unfollowSuccess(userId))\r\n        dispatch(toggleFollowingInProgress(false, userId))\r\n    })\r\n}","import React, {ComponentType, FC, memo} from 'react';\nimport {\n    DialogType,\n    MessageType,\n    sendMessage,\n} from '../../redux/reducers/messages-reducer';\nimport Messages from './Messages';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\nimport {AppRootStateType} from '../../redux/store';\nimport {WithAuthRedirect} from '../../hoc/withAuthRedirect';\n\ntype MessagesContainerProps = {\n    dialogs: DialogType[]\n    messages: MessageType[]\n    sendMessage: (message: string) => void\n};\n\nconst MessagesContainer: FC<MessagesContainerProps> = memo(({dialogs, messages, sendMessage,}) => {\n\n    return (\n        <Messages\n            dialogs={dialogs}\n            messages={messages}\n            sendMessage={sendMessage}\n        />\n    );\n});\n\n\nconst mapStateToProps = (state: AppRootStateType) => {\n    return {\n        dialogs: state.messagesPage.dialogs,\n        messages: state.messagesPage.messages,\n    }\n}\n\n\nexport default compose<ComponentType>(\n    connect(mapStateToProps, {sendMessage}),\n    WithAuthRedirect\n)(MessagesContainer)\n\n","export default __webpack_public_path__ + \"static/media/user.f5a52c39.png\";","import React, {useState} from 'react';\r\nimport { memo } from 'react';\r\nimport {FC} from 'react';\r\nimport s from \"../../styles/Paginator.module.css\";\r\n\r\ntype PaginatorProps = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (num: number) => void\r\n    portionSize: number\r\n}\r\n\r\nconst Paginator: FC<PaginatorProps> = memo(({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    const portionCount = Math.ceil(pagesCount / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState<number>(1)\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div className={s.pagination}>\r\n            {portionNumber > 1 &&\r\n            <div className={s.arrow} onClick={() => setPortionNumber(portionNumber - 1)}>&lt;</div>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(num =>\r\n                    <div\r\n                        key={num}\r\n                        onClick={() => onPageChanged(num)}\r\n                        className={`${s.pageNumber} ${currentPage === num ? s.active : ''}`}\r\n                    >\r\n                        {num}\r\n                    </div>\r\n                )}\r\n            {portionCount > portionNumber &&\r\n            <div className={s.arrow} onClick={() => setPortionNumber(portionNumber + 1)}>&gt;</div>}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Paginator;","import React, {FC, memo} from 'react';\r\nimport {UserType} from '../../redux/reducers/users-reducer';\r\nimport s from '../../styles/Users.module.css'\r\nimport userIcon from '../../assets/images/user.png'\r\nimport {NavLink} from 'react-router-dom';\r\nimport Paginator from \"../Paginator/Paginator\";\r\n\r\ntype UsersProps = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    users: UserType[]\r\n    currentPage: number\r\n    onPageChanged: (page: number) => void\r\n    followingInProgress: number[]\r\n    totalUsersCount: number\r\n    pageSize: number\r\n}\r\n\r\nconst Users: FC<UsersProps> = memo(({\r\n                                            users,\r\n                                            unfollow,\r\n                                            follow,\r\n                                            currentPage,\r\n                                            onPageChanged,\r\n                                            followingInProgress,\r\n                                            totalUsersCount,\r\n                                            pageSize\r\n                                        }) => {\r\n    return (\r\n        <div>\r\n            {users &&\r\n            users.map(u => (\r\n                <div key={u.id} className={s.user}>\r\n                    <div className={s.userAvatar}>\r\n                        <NavLink to={'/profile/' + u.id}>\r\n                            <img src={u.photos.small ? u.photos.small : userIcon} alt=\"user-avatar\"/>\r\n                        </NavLink>\r\n                        {u.followed\r\n                            ? <button\r\n                                onClick={() => unfollow(u.id)}\r\n                                disabled={followingInProgress.some(id => id === u.id)}\r\n                                className={s.btn}>Unfollow</button>\r\n                            : <button\r\n                                onClick={() => follow(u.id)}\r\n                                disabled={followingInProgress.some(id => id === u.id)}\r\n                                className={s.btn}>Follow</button>\r\n                        }\r\n\r\n                    </div>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + u.id} className={s.userName}>\r\n                            {u.name}\r\n                        </NavLink>\r\n                        <div className={s.userStatus}>{u.status}</div>\r\n                    </div>\r\n                </div>\r\n\r\n            ))\r\n            }\r\n            <Paginator\r\n                totalItemsCount={totalUsersCount}\r\n                pageSize={pageSize}\r\n                currentPage={currentPage}\r\n                onPageChanged={onPageChanged}\r\n                portionSize={10}\r\n            />\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Users;","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fb1b255d-daf2-447b-9658-1df546c81b09'\r\n    }\r\n});\r\n\r\n//api\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 5) {\r\n        return instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}`)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<ResponseType>(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<ResponseType>(`follow/${userId}`)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<MeType>>(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean, captcha: string) {\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUserProfile(userId: number) {\r\n        return instance.get<GetUserProfileType>(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ResponseType>(`profile/status`, {status: status})\r\n    },\r\n    savePhoto(image: File) {\r\n        const formData = new FormData()\r\n        formData.append('image', image)\r\n        return instance.put<ResponseType<PhotosType>>('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    updateUserProfile(profile: UpdateUserProfileType) {\r\n        return instance.put<ResponseType<{ url: string }>>('profile', profile)\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<string>('security/get-captcha-url')\r\n    },\r\n}\r\n\r\n//types\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\ntype MeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype PhotosType = {\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\ntype UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    followed: boolean\r\n}\r\n\r\ntype GetUsersType = {\r\n    items: UserType[]\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\ntype GetUserProfileType = {\r\n    userId: number\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        github: string\r\n        vk: string\r\n        facebook: string\r\n        instagram: string\r\n        twitter: string\r\n        website: string\r\n        youtube: string\r\n        mainLink: string\r\n    }\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n}\r\n\r\nexport type UpdateUserProfileType = {\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription?: string\r\n    fullName: string\r\n    contacts: {\r\n        github: string\r\n        vk: string\r\n        facebook: string\r\n        instagram: string\r\n        twitter: string\r\n        website: string\r\n        youtube: string\r\n        mainLink: string\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {profileAPI, UpdateUserProfileType} from '../../api/API';\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../store\";\r\n\r\nenum ACTION_TYPE {\r\n    ADD_POST = 'PROFILE/ADD_POST',\r\n    SET_USER_PROFILE = 'PROFILE/SET_USER_PROFILE',\r\n    SET_STATUS = 'PROFILE/SET_STATUS',\r\n    UPDATE_USER_PHOTO = 'PROFILE/UPDATE_USER_PHOTO',\r\n}\r\n\r\nexport type PostType = {\r\n    id: number;\r\n    message: string;\r\n};\r\n\r\nexport type UserProfileType = {\r\n    userId: number\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        github: string\r\n        vk: string\r\n        facebook: string\r\n        instagram: string\r\n        twitter: string\r\n        website: string\r\n        youtube: string\r\n        mainLink: string\r\n    }\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n}\r\n\r\nexport type ProfileStateType = {\r\n    profile: UserProfileType\r\n    posts: Array<PostType>\r\n    status: string\r\n}\r\n\r\n\r\nconst initialState: ProfileStateType = {\r\n    profile: {\r\n        aboutMe: '',\r\n        contacts: {\r\n            facebook: '',\r\n            website: '',\r\n            vk: '',\r\n            twitter: '',\r\n            instagram: '',\r\n            youtube: '',\r\n            github: '',\r\n            mainLink: '',\r\n        },\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: '',\r\n        fullName: '',\r\n        userId: 0,\r\n        photos: {\r\n            small: '',\r\n            large: '',\r\n        },\r\n    },\r\n    posts: [\r\n        {id: 1, message: 'Hello World!'},\r\n        {id: 2, message: '=^.^='},\r\n        {id: 3, message: 'Cat)0))'},\r\n    ],\r\n    status: '',\r\n}\r\n\r\n\r\nexport const profileReducer = (state: ProfileStateType = initialState, action: ProfileActionsType): ProfileStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.ADD_POST:\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id: 5, ...action.payload}],\r\n            }\r\n        case ACTION_TYPE.SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case ACTION_TYPE.SET_STATUS:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case ACTION_TYPE.UPDATE_USER_PHOTO:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    photos: {\r\n                        ...action.payload\r\n                    }\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ProfileActionsType =\r\n    ReturnType<typeof addPost> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setUserStatus> |\r\n    ReturnType<typeof updateUserPhoto>\r\n\r\n\r\nexport const addPost = (message: string) => {\r\n    return {\r\n        type: ACTION_TYPE.ADD_POST,\r\n        payload: {\r\n            message\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const setUserProfile = (profile: UserProfileType) => {\r\n    return {\r\n        type: ACTION_TYPE.SET_USER_PROFILE,\r\n        payload: {\r\n            profile,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport const setUserStatus = (status: string) => {\r\n    return {\r\n        type: ACTION_TYPE.SET_STATUS,\r\n        payload: {\r\n            status,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport const updateUserPhoto = (small: string, large: string) => {\r\n    return {\r\n        type: ACTION_TYPE.UPDATE_USER_PHOTO,\r\n        payload: {\r\n            small,\r\n            large\r\n        },\r\n    } as const\r\n}\r\n\r\n\r\nexport const getUserProfile = (userId: number) => (dispatch: Dispatch<ProfileActionsType>) => {\r\n    profileAPI.getUserProfile(userId).then(res => {\r\n        dispatch(setUserProfile(res.data))\r\n    })\r\n}\r\n\r\nexport const getUserStatus = (userId: number) => (dispatch: Dispatch<ProfileActionsType>) => {\r\n    profileAPI.getStatus(userId).then(res => {\r\n        dispatch(setUserStatus(res.data))\r\n    })\r\n}\r\n\r\nexport const updateUserStatus = (status: string) => (dispatch: Dispatch<ProfileActionsType>) => {\r\n    profileAPI.updateStatus(status).then(res => {\r\n        if (res.data.resultCode === 0)\r\n            dispatch(setUserStatus(status))\r\n    })\r\n}\r\n\r\nexport const savePhoto = (image: File) => (dispatch: Dispatch<ProfileActionsType>) => {\r\n    profileAPI.savePhoto(image).then(res => {\r\n        if (res.data.resultCode === 0)\r\n            dispatch(updateUserPhoto(res.data.data.photos.small, res.data.data.photos.large))\r\n\r\n    })\r\n}\r\n\r\nexport const updateUserProfile = (profile: UpdateUserProfileType) => (dispatch: ThunkDispatch<AppRootStateType, undefined, ProfileActionsType>, getState: () => AppRootStateType) => {\r\n    const userId = getState().auth.id\r\n    profileAPI.updateUserProfile(profile).then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(getUserProfile(userId))\r\n        }\r\n    })\r\n}","import React from 'react';\r\nimport s from '../../styles/Preloader.module.css';\r\n\r\nconst Preloader = () => {\r\n    return <div className={s.circle2}/>\r\n};\r\n\r\nexport default Preloader;","import React, {ComponentType, PureComponent} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Users from './Users';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {\r\n    changeCurrentPage, follow,\r\n    getUsers, setTotalUsersCount,\r\n    unfollow,\r\n    UserType\r\n} from '../../redux/reducers/users-reducer';\r\nimport Preloader from '../Preloader/Preloader';\r\nimport {compose} from 'redux';\r\n\r\ntype UsersContainerProps = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    users: UserType[]\r\n    totalUsersCount: number\r\n    pageSize: number,\r\n    currentPage: number,\r\n    changeCurrentPage: (page: number) => void\r\n    setTotalUsersCount: (usersCount: number) => void\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nclass UsersContainer extends PureComponent<UsersContainerProps> {\r\n\r\n    componentDidMount() {\r\n        if (this.props.users.length === 0) {\r\n            this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n        }\r\n    }\r\n\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.changeCurrentPage(pageNumber)\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n\r\n    render() {\r\n        let {\r\n            users,\r\n            totalUsersCount,\r\n            pageSize,\r\n            currentPage,\r\n            isFetching,\r\n            followingInProgress,\r\n        } = this.props;\r\n\r\n\r\n        const followOnClick = (userId: number) => {\r\n            this.props.follow(userId)\r\n        }\r\n\r\n        const unfollowOnClick = (userId: number) => {\r\n            this.props.unfollow(userId)\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {isFetching && <Preloader/>}\r\n                <Users\r\n                    users={users}\r\n                    follow={followOnClick}\r\n                    unfollow={unfollowOnClick}\r\n                    totalUsersCount={totalUsersCount}\r\n                    pageSize={pageSize}\r\n                    currentPage={currentPage}\r\n                    onPageChanged={this.onPageChanged}\r\n                    followingInProgress={followingInProgress}\r\n                />\r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        users: state.users.users,\r\n        totalUsersCount: state.users.totalUsersCount,\r\n        pageSize: state.users.pageSize,\r\n        currentPage: state.users.currentPage,\r\n        isFetching: state.users.isFetching,\r\n        followingInProgress: state.users.followingInProgress,\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        changeCurrentPage,\r\n        setTotalUsersCount,\r\n        getUsers\r\n    }),\r\n)\r\n(UsersContainer)\r\n","import React, {PureComponent} from 'react';\r\nimport {ChangeEvent} from 'react';\r\nimport s from '../../../styles/ProfileInfo.module.css'\r\n\r\ntype ProfileStatusProps = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nclass ProfileStatus extends PureComponent<ProfileStatusProps> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    onEditMode = () => {\r\n        this.setState({editMode: true})\r\n    }\r\n\r\n    offEditMode = () => {\r\n        this.setState({editMode: false})\r\n        this.props.updateUserStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({status: e.currentTarget.value})\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusProps>, prevState: Readonly<{}>) {\r\n        if (prevProps.status !== this.props.status)\r\n            this.setState({status: this.props.status})\r\n    }\r\n\r\n    render() {\r\n        return <div className={s.status}>\r\n            {\r\n                this.state.editMode && this.props.isOwner\r\n                    ? <input\r\n                        className={s.statusInput}\r\n                        type=\"text\"\r\n                        value={this.state.status}\r\n                        onBlur={this.offEditMode}\r\n                        onChange={this.onStatusChange}\r\n                        autoFocus\r\n                    />\r\n                    : <div onClick={this.onEditMode}>\r\n                        {this.props.status || 'Set status...'}\r\n                    </div>\r\n            }\r\n        </div>\r\n\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React, {FC, memo} from 'react';\r\nimport s from '../../../styles/Contact.module.css'\r\n\r\ntype ContactsProps = {\r\n    socialName: string\r\n    value: string\r\n}\r\n\r\nexport const Contact: FC<ContactsProps> = memo(({socialName,value}) => {\r\n    return (\r\n        value? <div><a href={value} className={s.contact}>{socialName} </a></div> : null\r\n    );\r\n});\r\n","import React, {FC, memo} from 'react';\r\nimport s from \"../../../styles/ProfileInfo.module.css\";\r\nimport userIcon from \"../../../assets/images/user.png\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport {Contact} from \"./Contact\";\r\nimport {UserProfileType} from \"../../../redux/reducers/profile-reducer\";\r\n\r\ntype ProfileDataProps = {\r\n    profile: UserProfileType\r\n    status: string\r\n    onEditModeClick: (bool: boolean) => void\r\n    isOwner: boolean\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileDataProps> = memo(({profile, status, onEditModeClick, isOwner, updateUserStatus}) => {\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div className={s.avatar}>\r\n                <img\r\n                    src={profile.photos.small ? profile.photos.small : userIcon}\r\n                    alt=\"avatar\"\r\n                />\r\n\r\n                {profile.lookingForAJob && <div className={s.lookingForAJob}>Looking For A Job!</div>}\r\n                {profile.lookingForAJobDescription && <div className={s.lookingForAJobDescription}>\r\n                    {profile.lookingForAJobDescription}\r\n                </div>}\r\n                {isOwner && <button onClick={() => onEditModeClick(true)}>Edit profile</button>}\r\n            </div>\r\n            <div>\r\n                <div className={s.fullName}>{profile.fullName}</div>\r\n                <ProfileStatus status={status} updateUserStatus={updateUserStatus} isOwner={isOwner}/>\r\n                <div className={s.descr}>\r\n                    <div>About me: <span>{profile.aboutMe}</span></div>\r\n\r\n                    <div>Contacts:</div>\r\n                    {Object.keys(profile.contacts).map(key => (\r\n                        //@ts-ignore\r\n                        <Contact key={key} socialName={key} value={profile.contacts[key]}/>\r\n\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ProfileData;","import {Dispatch} from 'redux';\r\nimport {authAPI, securityAPI} from '../../api/API';\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../store\";\r\n\r\nenum ACTION_TYPE {\r\n    SET_AUTH_USER = 'AUTH/SET_AUTH_USER',\r\n    GET_CAPTCHA_URL = 'AUTH/GET_CAPTCHA_URL',\r\n}\r\n\r\nexport type AuthStateType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n    isAuth: boolean\r\n    captchaUrl: string\r\n}\r\n\r\nconst initialState: AuthStateType = {\r\n    id: 0,\r\n    login: '',\r\n    email: '',\r\n    isAuth: false,\r\n    captchaUrl: ''\r\n}\r\n\r\n\r\nexport const authReducer = (state: AuthStateType = initialState, action: AuthActionsType): AuthStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.SET_AUTH_USER:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case ACTION_TYPE.GET_CAPTCHA_URL:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n\r\n\r\n    }\r\n}\r\n\r\ntype AuthActionsType = ReturnType<typeof setAuthUser> | ReturnType<typeof getCaptchaUrlSuccess>\r\n\r\nexport const setAuthUser = (id: number, login: string, email: string, isAuth: boolean) => {\r\n    return {\r\n        type: ACTION_TYPE.SET_AUTH_USER,\r\n        payload: {\r\n            id,\r\n            login,\r\n            email,\r\n            isAuth\r\n        },\r\n    } as const\r\n}\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string) => {\r\n    return {\r\n        type: ACTION_TYPE.GET_CAPTCHA_URL,\r\n        payload: {\r\n            captchaUrl\r\n        },\r\n    } as const\r\n}\r\n\r\nexport const getAuthUser = () => (dispatch: Dispatch<AuthActionsType>) => {\r\n    return authAPI.me().then(res => {\r\n        let {id, login, email} = res.data.data\r\n        if (res.data.resultCode === 0) dispatch(setAuthUser(id, login, email, true))\r\n    })\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => (dispatch: ThunkDispatch<AppRootStateType, undefined, AuthActionsType>) => {\r\n    authAPI.login(email, password, rememberMe, captcha).then(res => {\r\n        if (res.data.resultCode === 0) dispatch(getAuthUser())\r\n        if (res.data.resultCode === 10) dispatch(getCaptchaUrl())\r\n    })\r\n}\r\n\r\n\r\nexport const logout = () => (dispatch: Dispatch<AuthActionsType>) => {\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAuthUser(0, '', '', false))\r\n            }\r\n        })\r\n}\r\n\r\nexport const getCaptchaUrl = () => (dispatch: Dispatch<AuthActionsType>) => {\r\n    return securityAPI.getCaptchaUrl().then(res => {\r\n        //@ts-ignore\r\n        const captcha = res.data.url\r\n        dispatch(getCaptchaUrlSuccess(captcha))\r\n    })\r\n}\r\n","import React, {ChangeEvent, FC, memo} from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport s from \"../../../styles/ProfileDataForm.module.css\";\r\nimport {updateUserProfile, UserProfileType} from \"../../../redux/reducers/profile-reducer\";\r\nimport {connect} from 'react-redux';\r\nimport {UpdateUserProfileType} from \"../../../api/API\";\r\n\r\ntype ProfileDataFormProps = {\r\n    savePhoto: (image: File) => void\r\n    profile: UserProfileType\r\n    updateUserProfile: (profile: UpdateUserProfileType) => void\r\n    setEditMode: (bool: boolean) => void\r\n\r\n}\r\n\r\nconst ProfileDataForm: FC<ProfileDataFormProps> = memo(({savePhoto, profile, updateUserProfile, setEditMode}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: profile.fullName,\r\n            aboutMe: profile.aboutMe,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            contacts: {\r\n                facebook: profile.contacts.facebook,\r\n                website: profile.contacts.website,\r\n                vk: profile.contacts.vk,\r\n                twitter: profile.contacts.twitter,\r\n                instagram: profile.contacts.instagram,\r\n                youtube: profile.contacts.youtube,\r\n                github: profile.contacts.github,\r\n                mainLink: profile.contacts.mainLink,\r\n            }\r\n\r\n        },\r\n        onSubmit: values => {\r\n            updateUserProfile(values)\r\n            setEditMode(false)\r\n        }\r\n    })\r\n\r\n    const onInputFileChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files) {\r\n            savePhoto(e.currentTarget.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <form className={s.form} onSubmit={formik.handleSubmit}>\r\n            <label>\r\n                My photo:\r\n                <input\r\n                    type={'file'}\r\n                    onChange={onInputFileChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Full name:\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={'fullName'}\r\n                    {...formik.getFieldProps('fullName')}\r\n                />\r\n            </label>\r\n            <label>\r\n                About me:\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={'aboutMe'}\r\n                    {...formik.getFieldProps('aboutMe')}\r\n                />\r\n            </label>\r\n            <label>\r\n                Looking for a job\r\n                <input\r\n                    type=\"checkbox\"\r\n                    onChange={formik.handleChange}\r\n                    checked={formik.values.lookingForAJob}\r\n                    name={'lookingForAJob'}\r\n                />\r\n            </label>\r\n            <label>\r\n                My skills:\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={'Looking for a job description'}\r\n                    {...formik.getFieldProps('lookingForAJobDescription')}\r\n                />\r\n            </label>\r\n\r\n            {Object.keys(profile.contacts).map(key => (\r\n                <label key={key}>\r\n                    {key[0].toUpperCase()+key.slice(1)}:\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder={key}\r\n                        {...formik.getFieldProps(`contacts.${key}`)}\r\n                    />\r\n                </label>\r\n            ))}\r\n\r\n            <div className={s.btnGroup}>\r\n                <button className={s.btn} type={'submit'}>Save</button>\r\n                <button className={s.btn} type={'button'} onClick={() => setEditMode(false)}>Back</button>\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n});\r\n\r\n\r\nexport default connect(null, {updateUserProfile})(ProfileDataForm)\r\n","import React, {FC, memo, useState} from 'react';\nimport {UserProfileType} from '../../../redux/reducers/profile-reducer';\nimport ProfileData from \"./ProfileData\";\nimport ProfileDataForm from \"./ProfileDataForm\";\n\ntype ProfileInfoProps = {\n    profile: UserProfileType\n    status: string\n    updateUserStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (image: File) => void\n};\n\nconst ProfileInfo: FC<ProfileInfoProps> = memo(({profile, status, updateUserStatus, isOwner, savePhoto}) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n\n\n    return <>\n        {editMode\n            ? <ProfileDataForm profile={profile} savePhoto={savePhoto} setEditMode={setEditMode} />\n            : <ProfileData\n                profile={profile}\n                status={status}\n                updateUserStatus={updateUserStatus}\n                onEditModeClick={setEditMode}\n                isOwner={isOwner}\n\n            />\n        }\n    </>\n});\n\nexport default ProfileInfo;\n","import React, {FC, memo} from \"react\";\nimport styles from \"../../../styles/Post.module.css\";\n\ntype PostProps = {\n    message: string;\n};\n\nconst Post: FC<PostProps> = memo(({message}) => {\n    return (\n        <div className={styles.post}>\n            <img\n                src=\"https://cdn1.flamp.ru/96a74d31e6bd619a8f381c27ef308a76.png\"\n                alt=\"avatar\"\n            />\n            <div className={styles.postMessage}>{message}</div>\n        </div>\n    );\n});\n\nexport default Post;\n","import React, {memo} from 'react';\nimport Post from './Post';\nimport s from '../../../styles/Posts.module.css';\nimport {PostType} from '../../../redux/reducers/profile-reducer';\nimport {useFormik} from \"formik\";\n\ntype PostsProps = {\n    posts: PostType[]\n    addPost: (message: string) => void\n};\n\ntype FormikErrorType = {\n    message?: string\n}\n\nconst Posts: React.FC<PostsProps> = memo(({posts, addPost}) => {\n\n    const formik = useFormik({\n        initialValues: {\n            message: ''\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.message) {\n                errors.message = 'Required';\n            }\n            if (values.message.length > 140) {\n                errors.message = 'Post length must not be more than 140 characters'\n            }\n            return errors\n        },\n        onSubmit: values => {\n            formik.resetForm()\n            addPost(values.message)\n        },\n    })\n\n    return (\n        <>\n            <div>My posts</div>\n            <form className={s.posts_form} onSubmit={formik.handleSubmit}>\n                <textarea\n                    {...formik.getFieldProps('message')}\n                    className={s.textarea}\n                    placeholder={'Your news...'}\n                />\n                <button className={s.btn} type={'submit'}>\n                    Add post\n                </button>\n            </form>\n            {posts && posts.map((p) => <Post key={p.id} message={p.message}/>)}\n        </>\n    );\n});\nexport default Posts;\n","import React, {FC, memo} from 'react';\r\nimport {addPost,PostType} from '../../../redux/reducers/profile-reducer';\r\nimport Posts from './Posts';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../../../redux/store';\r\n\r\ntype PostsContainerProps = {\r\n    posts: PostType[]\r\n    addPost: (message: string) => void\r\n};\r\n\r\nconst PostsContainer: FC<PostsContainerProps> = memo(({posts, addPost}) => {\r\n\r\n    return (\r\n        <Posts posts={posts}  addPost={addPost}/>\r\n    );\r\n});\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {addPost})(PostsContainer);\r\n","import React, {FC, memo} from 'react';\nimport s from '../../styles/Profile.module.css';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport PostsContainer from './Posts/PostsContainer';\nimport {UserProfileType} from '../../redux/reducers/profile-reducer';\n\ntype ProfileProps = {\n    profile: UserProfileType\n    status: string\n    updateUserStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (image: File) => void\n};\n\nconst Profile: FC<ProfileProps> = memo(({profile,status,updateUserStatus,isOwner,savePhoto}) => {\n    return (\n        <div className={s.profile}>\n            <ProfileInfo profile={profile} status={status} updateUserStatus={updateUserStatus} isOwner={isOwner} savePhoto={savePhoto}/>\n            <PostsContainer />\n        </div>\n    );\n});\n\nexport default Profile;\n","import React, {ComponentType, PureComponent} from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    savePhoto,\r\n    updateUserStatus,\r\n    UserProfileType\r\n} from '../../redux/reducers/profile-reducer';\r\nimport Preloader from '../Preloader/Preloader';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: UserProfileType,\r\n    isAuth: boolean,\r\n    status: string\r\n    authUserId: number\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (image: File) => void\r\n}\r\n\r\ntype PropsType = MapDispatchToPropsType & MapStateToPropsType\r\ntype ProfileContainerProps = RouteComponentProps<PathParamsType> & PropsType\r\n\r\nclass ProfileContainer extends PureComponent<ProfileContainerProps> {\r\n\r\n    refreshProfile() {\r\n        let userId = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerProps>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.props.profile.userId\r\n                ? <Profile profile={this.props.profile}\r\n                           status={this.props.status}\r\n                           updateUserStatus={this.props.updateUserStatus}\r\n                           isOwner={!this.props.match.params.userId}\r\n                           savePhoto={this.props.savePhoto}\r\n                />\r\n                : <Preloader/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        isAuth: state.auth.isAuth,\r\n        status: state.profilePage.status,\r\n        authUserId: state.auth.id,\r\n    }\r\n}\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus,savePhoto}),\r\n    withRouter,\r\n)(ProfileContainer)","import React, { FC } from 'react';\nimport { memo } from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from '../../styles/Header.module.css';\n\ntype HeaderProps = {\n    isAuth: boolean\n    login: string\n    logout: () => void\n}\n\nconst Header: FC<HeaderProps> = memo( ({isAuth, login, logout}) => {\n    return (\n        <header className={s.header}>\n            <div>&lt;logo/&gt;</div>\n            {isAuth\n                ? <div className={s.login}>{login}\n                    <div className={s.logOut} onClick={logout}>Log out</div>\n                </div>\n                : <NavLink to={'/login'} className={s.loginBtn}>Login</NavLink>\n            }\n        </header>\n    );\n});\n\nexport default Header;\n","import {getAuthUser} from \"./auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../store\";\r\n\r\nenum ACTION_TYPE {\r\n    INITIALIZED_SUCCESS = 'APP/INITIALIZED_SUCCESS'\r\n}\r\n\r\ntype AppStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: AppStateType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: AppActionsType): AppStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype AppActionsType = ReturnType<typeof initializedSuccess>\r\n\r\n\r\nexport const initializedSuccess = () => {\r\n    return {\r\n        type: ACTION_TYPE.INITIALIZED_SUCCESS,\r\n        payload: {\r\n            initialized: true\r\n        } as const\r\n    }\r\n}\r\n\r\n\r\nexport const initializeApp = () => (dispatch: ThunkDispatch<AppRootStateType, undefined, AppActionsType>) => {\r\n    const promise = dispatch(getAuthUser())\r\n    promise.then(() => {\r\n        dispatch(initializedSuccess())\r\n    })\r\n\r\n}\r\n","import React, {PureComponent} from 'react';\r\nimport Header from './Header';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {logout} from '../../redux/reducers/auth-reducer';\r\n\r\ntype HeaderContainerProps = {\r\n    isAuth: boolean\r\n    login: string\r\n    logout: () => void\r\n}\r\n\r\nclass HeaderContainer extends PureComponent<HeaderContainerProps> {\r\n\r\n    render() {\r\n        return (\r\n            <Header isAuth={this.props.isAuth} login={this.props.login} logout={this.props.logout}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);","import React, {FC} from 'react';\r\nimport s from '../../styles/Login.module.css'\r\nimport {useFormik} from \"formik\";\r\nimport {connect} from 'react-redux';\r\nimport {login} from \"../../redux/reducers/auth-reducer\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {memo} from 'react';\r\n\r\n\r\ntype LoginProps = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    isAuth: boolean\r\n    captchaUrl: string\r\n}\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nconst Login: FC<LoginProps> = memo(({login, isAuth, captchaUrl}) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password && values.password.length <= 2) {\r\n                errors.password = 'Password length must be more than two'\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            login(values.email, values.password, values.rememberMe, values.captcha)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <form className={s.form} onSubmit={formik.handleSubmit}>\r\n            <div className={s.account}>\r\n                <p>Test account:</p>\r\n                <p>Email: free@samuraijs.com</p>\r\n                <p>Password: free</p>\r\n            </div>\r\n            <div>ACCOUNT LOGIN</div>\r\n\r\n            <input\r\n                type=\"text\"\r\n                placeholder={'E-mail'}\r\n                {...formik.getFieldProps('email')}\r\n            />\r\n\r\n            {formik.touched.email &&\r\n            formik.errors.email ? <div className={s.error}>{formik.errors.email}</div> : null}\r\n            <input\r\n                type=\"password\"\r\n                placeholder={'Password'}\r\n                {...formik.getFieldProps('password')}\r\n            />\r\n            {formik.touched.password &&\r\n            formik.errors.password ? <div className={s.error}>{formik.errors.password}</div> : null}\r\n\r\n            {captchaUrl\r\n                ? <div className={s.captcha}><img src={captchaUrl} alt=\"captcha\"/>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder={'Enter captcha'}\r\n                        {...formik.getFieldProps('captcha')}\r\n                    />\r\n                </div>\r\n                : null}\r\n\r\n            <label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    onChange={formik.handleChange}\r\n                    checked={formik.values.rememberMe}\r\n                    name={'rememberMe'}/>\r\n                remember me\r\n            </label>\r\n\r\n            <button className={s.btn} type={'submit'}>LOG IN</button>\r\n        </form>\r\n    );\r\n});\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl,\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from '../../styles/Error404.module.css'\r\n\r\nconst Error404 = () => {\r\n    return (\r\n        <div className={s.error}>\r\n            <h1>Error 404</h1>\r\n            <NavLink to={'/profile'}>\r\n                <div className={s.btn}>to profile</div>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Error404;","import React, {PureComponent} from 'react';\nimport './styles/App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport MessagesContainer from './components/Messages/MessagesContainer';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport UsersContainer from './components/Users/UsersContainer';\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Login from './components/Login/Login';\nimport {connect} from 'react-redux';\nimport {initializeApp} from \"./redux/reducers/app-reducer\";\nimport {AppRootStateType} from \"./redux/store\";\nimport Preloader from \"./components/Preloader/Preloader\";\nimport Error404 from './components/Error404/Error404';\n\n\ntype AppPropsTypeType = {\n    initialized: boolean\n    initializeApp: () => void\n}\n\nclass App extends PureComponent<AppPropsTypeType> {\n\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <Navbar/>\n                <div className=\"app-content-wrapper\">\n                    <Switch>\n                        <Route path={'/'} exact render={() => <Redirect to={'/profile'}/>}/>\n                        <Route\n                            path={'/profile/:userId?'}\n                            render={() => <ProfileContainer/>}\n                        />\n                        <Route\n                            path={'/messages'}\n                            render={() => <MessagesContainer/>}\n                        />\n                        <Route\n                            path={'/users'}\n                            render={() => <UsersContainer/>}\n                        />\n                        <Route\n                            path={'/login'}\n                            render={() => <Login/>}\n                        />\n                        <Route render={() => <Error404/>}/>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppRootStateType) => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\nexport default connect(mapStateToProps, {initializeApp})(App);\n","import {applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport {profileReducer} from './reducers/profile-reducer';\r\nimport {messagesReducer} from './reducers/messages-reducer';\r\nimport {usersReducer} from './reducers/users-reducer';\r\nimport {authReducer} from './reducers/auth-reducer';\r\nimport { appReducer } from './reducers/app-reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    profilePage: profileReducer,\r\n    messagesPage: messagesReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n})\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {store} from './redux/store';\nimport {HashRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\n\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}